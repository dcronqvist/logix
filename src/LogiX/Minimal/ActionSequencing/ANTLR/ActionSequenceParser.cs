//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\RichieZ\repos\logix\src\LogiX\Minimal\ActionSequencing\ANTLR\ActionSequence.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LogiX.Minimal.ActionSequencing {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ActionSequenceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, BINARY_LITERAL=22, HEX_LITERAL=23, 
		DECIMAL_LITERAL=24, STRING_LITERAL=25, PIN_ID=26, WHITESPACE=27, LINECOMMENT=28;
	public const int
		RULE_program = 0, RULE_actionSequence = 1, RULE_action = 2, RULE_wait = 3, 
		RULE_assignment = 4, RULE_end = 5, RULE_continue = 6, RULE_print = 7, 
		RULE_push = 8, RULE_connectKeyboard = 9, RULE_connectTTY = 10, RULE_mountDisk = 11, 
		RULE_exp = 12, RULE_literalexp = 13, RULE_ramexp = 14, RULE_pinexp = 15, 
		RULE_boolexp = 16;
	public static readonly string[] ruleNames = {
		"program", "actionSequence", "action", "wait", "assignment", "end", "continue", 
		"print", "push", "connectKeyboard", "connectTTY", "mountDisk", "exp", 
		"literalexp", "ramexp", "pinexp", "boolexp"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'wait'", "' '", "'set'", "'='", "'end'", "'continue'", "'print'", 
		"'push'", "','", "'connect_keyboard'", "'connect_tty'", "'mount_disk'", 
		"'['", "']'", "'=='", "'!='", "'&&'", "'||'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "BINARY_LITERAL", 
		"HEX_LITERAL", "DECIMAL_LITERAL", "STRING_LITERAL", "PIN_ID", "WHITESPACE", 
		"LINECOMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ActionSequence.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ActionSequenceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ActionSequenceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ActionSequenceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionSequenceContext actionSequence() {
			return GetRuleContext<ActionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ActionSequenceParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			actionSequence();
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(ActionSequenceParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(ActionSequenceParser.WHITESPACE, i);
		}
		public ActionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSequenceContext actionSequence() {
		ActionSequenceContext _localctx = new ActionSequenceContext(Context, State);
		EnterRule(_localctx, 2, RULE_actionSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 37;
				action();
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WHITESPACE) {
					{
					{
					State = 38;
					Match(WHITESPACE);
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitContext wait() {
			return GetRuleContext<WaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueContext @continue() {
			return GetRuleContext<ContinueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PushContext push() {
			return GetRuleContext<PushContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectKeyboardContext connectKeyboard() {
			return GetRuleContext<ConnectKeyboardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectTTYContext connectTTY() {
			return GetRuleContext<ConnectTTYContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MountDiskContext mountDisk() {
			return GetRuleContext<MountDiskContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 4, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				{
				State = 48;
				assignment();
				}
				break;
			case T__1:
				{
				State = 49;
				wait();
				}
				break;
			case T__5:
				{
				State = 50;
				end();
				}
				break;
			case T__6:
				{
				State = 51;
				@continue();
				}
				break;
			case T__7:
				{
				State = 52;
				print();
				}
				break;
			case T__8:
				{
				State = 53;
				push();
				}
				break;
			case T__10:
				{
				State = 54;
				connectKeyboard();
				}
				break;
			case T__11:
				{
				State = 55;
				connectTTY();
				}
				break;
			case T__12:
				{
				State = 56;
				mountDisk();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 59;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexpContext boolexp() {
			return GetRuleContext<BoolexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(ActionSequenceParser.DECIMAL_LITERAL, 0); }
		public WaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitContext wait() {
		WaitContext _localctx = new WaitContext(Context, State);
		EnterRule(_localctx, 6, RULE_wait);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__1);
			State = 62;
			Match(T__2);
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
			case BINARY_LITERAL:
			case HEX_LITERAL:
			case PIN_ID:
				{
				State = 63;
				boolexp(0);
				}
				break;
			case DECIMAL_LITERAL:
				{
				State = 64;
				Match(DECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinexpContext pinexp() {
			return GetRuleContext<PinexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RamexpContext ramexp() {
			return GetRuleContext<RamexpContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__3);
			State = 68;
			Match(T__2);
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 69;
				pinexp();
				}
				break;
			case 2:
				{
				State = 70;
				ramexp();
				}
				break;
			}
			State = 73;
			Match(T__4);
			State = 74;
			exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 10, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueContext : ParserRuleContext {
		public ContinueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueContext @continue() {
		ContinueContext _localctx = new ContinueContext(Context, State);
		EnterRule(_localctx, 12, RULE_continue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ActionSequenceParser.STRING_LITERAL, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 14, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(T__7);
			State = 81;
			Match(T__2);
			State = 82;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN_ID() { return GetToken(ActionSequenceParser.PIN_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolexpContext boolexp() {
			return GetRuleContext<BoolexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(ActionSequenceParser.DECIMAL_LITERAL, 0); }
		public PushContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_push; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPush(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PushContext push() {
		PushContext _localctx = new PushContext(Context, State);
		EnterRule(_localctx, 16, RULE_push);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__8);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 85;
				Match(T__2);
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91;
			Match(PIN_ID);
			State = 92;
			Match(T__9);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 93;
				Match(T__2);
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
			case BINARY_LITERAL:
			case HEX_LITERAL:
			case PIN_ID:
				{
				State = 99;
				boolexp(0);
				}
				break;
			case DECIMAL_LITERAL:
				{
				State = 100;
				Match(DECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectKeyboardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN_ID() { return GetToken(ActionSequenceParser.PIN_ID, 0); }
		public ConnectKeyboardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectKeyboard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnectKeyboard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectKeyboardContext connectKeyboard() {
		ConnectKeyboardContext _localctx = new ConnectKeyboardContext(Context, State);
		EnterRule(_localctx, 18, RULE_connectKeyboard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__10);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 104;
				Match(T__2);
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(PIN_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectTTYContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN_ID() { return GetToken(ActionSequenceParser.PIN_ID, 0); }
		public ConnectTTYContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectTTY; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnectTTY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectTTYContext connectTTY() {
		ConnectTTYContext _localctx = new ConnectTTYContext(Context, State);
		EnterRule(_localctx, 20, RULE_connectTTY);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__11);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 113;
				Match(T__2);
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119;
			Match(PIN_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MountDiskContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN_ID() { return GetToken(ActionSequenceParser.PIN_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ActionSequenceParser.STRING_LITERAL, 0); }
		public MountDiskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mountDisk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMountDisk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MountDiskContext mountDisk() {
		MountDiskContext _localctx = new MountDiskContext(Context, State);
		EnterRule(_localctx, 22, RULE_mountDisk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(T__12);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 122;
				Match(T__2);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128;
			Match(PIN_ID);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 129;
				Match(T__2);
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 135;
			Match(T__9);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 136;
				Match(T__2);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinexpContext pinexp() {
			return GetRuleContext<PinexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RamexpContext ramexp() {
			return GetRuleContext<RamexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralexpContext literalexp() {
			return GetRuleContext<LiteralexpContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 24, RULE_exp);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				pinexp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				ramexp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				literalexp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LITERAL() { return GetToken(ActionSequenceParser.BINARY_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(ActionSequenceParser.HEX_LITERAL, 0); }
		public LiteralexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralexpContext literalexp() {
		LiteralexpContext _localctx = new LiteralexpContext(Context, State);
		EnterRule(_localctx, 26, RULE_literalexp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_LITERAL || _la==HEX_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RamexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN_ID() { return GetToken(ActionSequenceParser.PIN_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(ActionSequenceParser.HEX_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LITERAL() { return GetToken(ActionSequenceParser.BINARY_LITERAL, 0); }
		public RamexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ramexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRamexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RamexpContext ramexp() {
		RamexpContext _localctx = new RamexpContext(Context, State);
		EnterRule(_localctx, 28, RULE_ramexp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(PIN_ID);
			State = 152;
			Match(T__13);
			State = 153;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_LITERAL || _la==HEX_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 154;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN_ID() { return GetToken(ActionSequenceParser.PIN_ID, 0); }
		public PinexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinexpContext pinexp() {
		PinexpContext _localctx = new PinexpContext(Context, State);
		EnterRule(_localctx, 30, RULE_pinexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(PIN_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexpContext[] boolexp() {
			return GetRuleContexts<BoolexpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexpContext boolexp(int i) {
			return GetRuleContext<BoolexpContext>(i);
		}
		public BoolexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActionSequenceVisitor<TResult> typedVisitor = visitor as IActionSequenceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexpContext boolexp() {
		return boolexp(0);
	}

	private BoolexpContext boolexp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolexpContext _localctx = new BoolexpContext(Context, _parentState);
		BoolexpContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_boolexp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 159;
				exp();
				State = 160;
				Match(T__15);
				State = 161;
				exp();
				}
				break;
			case 2:
				{
				State = 163;
				exp();
				State = 164;
				Match(T__16);
				State = 165;
				exp();
				}
				break;
			case 3:
				{
				State = 167;
				Match(T__19);
				State = 168;
				boolexp(0);
				State = 169;
				Match(T__20);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 183;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new BoolexpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolexp);
						State = 173;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 174;
						Match(T__2);
						State = 175;
						Match(T__17);
						State = 176;
						Match(T__2);
						State = 177;
						boolexp(4);
						}
						break;
					case 2:
						{
						_localctx = new BoolexpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolexp);
						State = 178;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 179;
						Match(T__2);
						State = 180;
						Match(T__18);
						State = 181;
						Match(T__2);
						State = 182;
						boolexp(3);
						}
						break;
					}
					} 
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return boolexp_sempred((BoolexpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolexp_sempred(BoolexpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\xBF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '*', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', '-', '\v', '\x3', '\x6', '\x3', '/', 
		'\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x30', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '<', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x44', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'J', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'Y', '\n', '\n', '\f', '\n', '\xE', '\n', '\\', '\v', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x61', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x64', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', 'h', '\n', '\n', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'l', '\n', '\v', '\f', '\v', '\xE', '\v', 'o', '\v', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', 'u', '\n', '\f', '\f', 
		'\f', '\xE', '\f', 'x', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '~', '\n', '\r', '\f', '\r', '\xE', '\r', '\x81', 
		'\v', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x85', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x88', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x8C', '\n', '\r', '\f', '\r', '\xE', '\r', '\x8F', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x96', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\xAE', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xBA', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\xBD', '\v', '\x12', '\x3', '\x12', '\x2', '\x3', 
		'\"', '\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', '\x3', 
		'\x3', '\x2', '\x18', '\x19', '\x2', '\xC7', '\x2', '$', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', ';', '\x3', 
		'\x2', '\x2', '\x2', '\b', '?', '\x3', '\x2', '\x2', '\x2', '\n', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'P', '\x3', '\x2', '\x2', '\x2', '\x10', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'V', '\x3', '\x2', '\x2', '\x2', '\x14', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'r', '\x3', '\x2', '\x2', '\x2', '\x18', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x95', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x99', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x9E', '\x3', '\x2', '\x2', '\x2', '\"', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\x5', '\x4', '\x3', '\x2', '%', '&', '\a', '\x2', '\x2', 
		'\x3', '&', '\x3', '\x3', '\x2', '\x2', '\x2', '\'', '+', '\x5', '\x6', 
		'\x4', '\x2', '(', '*', '\a', '\x1D', '\x2', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '\'', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x5', '\x3', '\x2', '\x2', '\x2', '\x32', '<', '\x5', 
		'\n', '\x6', '\x2', '\x33', '<', '\x5', '\b', '\x5', '\x2', '\x34', '<', 
		'\x5', '\f', '\a', '\x2', '\x35', '<', '\x5', '\xE', '\b', '\x2', '\x36', 
		'<', '\x5', '\x10', '\t', '\x2', '\x37', '<', '\x5', '\x12', '\n', '\x2', 
		'\x38', '<', '\x5', '\x14', '\v', '\x2', '\x39', '<', '\x5', '\x16', '\f', 
		'\x2', ':', '<', '\x5', '\x18', '\r', '\x2', ';', '\x32', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x33', '\x3', '\x2', '\x2', '\x2', ';', '\x34', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x35', '\x3', '\x2', '\x2', '\x2', ';', '\x36', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x37', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x38', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\a', '\x3', '\x2', '\x2', '>', '\a', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\a', '\x4', '\x2', '\x2', '@', '\x43', '\a', '\x5', 
		'\x2', '\x2', '\x41', '\x44', '\x5', '\"', '\x12', '\x2', '\x42', '\x44', 
		'\a', '\x1A', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\a', '\x6', '\x2', '\x2', '\x46', 'I', 
		'\a', '\x5', '\x2', '\x2', 'G', 'J', '\x5', ' ', '\x11', '\x2', 'H', 'J', 
		'\x5', '\x1E', '\x10', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 
		'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\a', '\a', '\x2', '\x2', 'L', 'M', '\x5', '\x1A', '\xE', '\x2', 
		'M', '\v', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\b', '\x2', '\x2', 
		'O', '\r', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\t', '\x2', '\x2', 
		'Q', '\xF', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\n', '\x2', '\x2', 
		'S', 'T', '\a', '\x5', '\x2', '\x2', 'T', 'U', '\a', '\x1B', '\x2', '\x2', 
		'U', '\x11', '\x3', '\x2', '\x2', '\x2', 'V', 'Z', '\a', '\v', '\x2', 
		'\x2', 'W', 'Y', '\a', '\x5', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x1C', 
		'\x2', '\x2', '^', '\x62', '\a', '\f', '\x2', '\x2', '_', '\x61', '\a', 
		'\x5', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x5', 
		'\"', '\x12', '\x2', '\x66', 'h', '\a', '\x1A', '\x2', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x13', '\x3', '\x2', '\x2', '\x2', 'i', 'm', '\a', '\r', '\x2', '\x2', 
		'j', 'l', '\a', '\x5', '\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 
		'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x1C', '\x2', '\x2', 
		'q', '\x15', '\x3', '\x2', '\x2', '\x2', 'r', 'v', '\a', '\xE', '\x2', 
		'\x2', 's', 'u', '\a', '\x5', '\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\x1C', '\x2', 
		'\x2', 'z', '\x17', '\x3', '\x2', '\x2', '\x2', '{', '\x7F', '\a', '\xF', 
		'\x2', '\x2', '|', '~', '\a', '\x5', '\x2', '\x2', '}', '|', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x81', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x86', '\a', '\x1C', '\x2', '\x2', '\x83', '\x85', '\a', 
		'\x5', '\x2', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8D', '\a', '\f', '\x2', '\x2', '\x8A', '\x8C', '\a', '\x5', '\x2', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\x1B', '\x2', '\x2', '\x91', '\x19', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x96', '\x5', ' ', '\x11', '\x2', '\x93', '\x96', '\x5', '\x1E', '\x10', 
		'\x2', '\x94', '\x96', '\x5', '\x1C', '\xF', '\x2', '\x95', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\t', '\x2', '\x2', '\x2', '\x98', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '\x1C', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '\x10', '\x2', '\x2', '\x9B', '\x9C', '\t', '\x2', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '\x11', '\x2', '\x2', '\x9D', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x1C', '\x2', '\x2', '\x9F', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\b', '\x12', '\x1', 
		'\x2', '\xA1', '\xA2', '\x5', '\x1A', '\xE', '\x2', '\xA2', '\xA3', '\a', 
		'\x12', '\x2', '\x2', '\xA3', '\xA4', '\x5', '\x1A', '\xE', '\x2', '\xA4', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x5', '\x1A', '\xE', 
		'\x2', '\xA6', '\xA7', '\a', '\x13', '\x2', '\x2', '\xA7', '\xA8', '\x5', 
		'\x1A', '\xE', '\x2', '\xA8', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\x16', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\"', '\x12', 
		'\x2', '\xAB', '\xAC', '\a', '\x17', '\x2', '\x2', '\xAC', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\f', 
		'\x5', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x5', '\x2', '\x2', '\xB1', 
		'\xB2', '\a', '\x14', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x5', '\x2', 
		'\x2', '\xB3', '\xBA', '\x5', '\"', '\x12', '\x6', '\xB4', '\xB5', '\f', 
		'\x4', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x5', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x15', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x5', '\x2', 
		'\x2', '\xB8', '\xBA', '\x5', '\"', '\x12', '\x5', '\xB9', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'+', '\x30', ';', '\x43', 'I', 'Z', '\x62', 'g', 'm', 'v', '\x7F', '\x86', 
		'\x8D', '\x95', '\xAD', '\xB9', '\xBB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LogiX.Minimal.ActionSequencing
