//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\RichieZ\repos\logix\src\GateAlgebra\GateAlgebra.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LogiX.GateAlgebra {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class GateAlgebraParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, ALPHA=11;
	public const int
		RULE_component = 0, RULE_assignment = 1, RULE_variable = 2, RULE_primary = 3, 
		RULE_expression = 4, RULE_gate = 5;
	public static readonly string[] ruleNames = {
		"component", "assignment", "variable", "primary", "expression", "gate"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'not'", "'and'", "'or'", "'xor'", "'nor'", 
		"'nand'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "ALPHA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GateAlgebra.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GateAlgebraParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GateAlgebraParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GateAlgebraParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComponentContext : ParserRuleContext {
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGateAlgebraVisitor<TResult> typedVisitor = visitor as IGateAlgebraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentContext component() {
		ComponentContext _localctx = new ComponentContext(Context, State);
		EnterRule(_localctx, 0, RULE_component);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12; assignment();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ALPHA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGateAlgebraVisitor<TResult> typedVisitor = visitor as IGateAlgebraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 2, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17; variable();
			State = 18; Match(T__0);
			State = 19; primary();
			State = 20; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode ALPHA() { return GetToken(GateAlgebraParser.ALPHA, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGateAlgebraVisitor<TResult> typedVisitor = visitor as IGateAlgebraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 4, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(ALPHA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GateContext[] gate() {
			return GetRuleContexts<GateContext>();
		}
		public GateContext gate(int i) {
			return GetRuleContext<GateContext>(i);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGateAlgebraVisitor<TResult> typedVisitor = visitor as IGateAlgebraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 6, RULE_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; expression();
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) {
				{
				{
				State = 25; gate();
				State = 26; expression();
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGateAlgebraVisitor<TResult> typedVisitor = visitor as IGateAlgebraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALPHA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; variable();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; Match(T__2);
				State = 35; primary();
				State = 36; Match(T__3);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; Match(T__4);
				State = 39; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GateContext : ParserRuleContext {
		public GateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGateAlgebraVisitor<TResult> typedVisitor = visitor as IGateAlgebraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GateContext gate() {
		GateContext _localctx = new GateContext(Context, State);
		EnterRule(_localctx, 10, RULE_gate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', '/', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x6', '\x2', '\x10', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x11', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x1F', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\"', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '+', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x2', '\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\x2', '\x3', '\x3', '\x2', '\b', '\f', '\x2', ',', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x13', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\b', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\n', '*', '\x3', '\x2', '\x2', '\x2', '\f', ',', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x3', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', 
		'\x5', '\x6', '\x4', '\x2', '\x14', '\x15', '\a', '\x3', '\x2', '\x2', 
		'\x15', '\x16', '\x5', '\b', '\x5', '\x2', '\x16', '\x17', '\a', '\x4', 
		'\x2', '\x2', '\x17', '\x5', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\a', '\r', '\x2', '\x2', '\x19', '\a', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		' ', '\x5', '\n', '\x6', '\x2', '\x1B', '\x1C', '\x5', '\f', '\a', '\x2', 
		'\x1C', '\x1D', '\x5', '\n', '\x6', '\x2', '\x1D', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1F', '\"', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', 
		'!', '\x3', '\x2', '\x2', '\x2', '!', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', '+', '\x5', '\x6', '\x4', 
		'\x2', '$', '%', '\a', '\x5', '\x2', '\x2', '%', '&', '\x5', '\b', '\x5', 
		'\x2', '&', '\'', '\a', '\x6', '\x2', '\x2', '\'', '+', '\x3', '\x2', 
		'\x2', '\x2', '(', ')', '\a', '\a', '\x2', '\x2', ')', '+', '\x5', '\n', 
		'\x6', '\x2', '*', '#', '\x3', '\x2', '\x2', '\x2', '*', '$', '\x3', '\x2', 
		'\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '+', '\v', '\x3', 
		'\x2', '\x2', '\x2', ',', '-', '\t', '\x2', '\x2', '\x2', '-', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x11', ' ', '*',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LogiX.GateAlgebra
