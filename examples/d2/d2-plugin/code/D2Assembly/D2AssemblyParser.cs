//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\RichieZ\repos\logix\examples\d2\d2-plugin\code\D2Assembly\D2Assembly.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace D2Plugin {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class D2AssemblyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, INSTRUCTION=21, LABEL=22, BINARY=23, HEXADECIMAL=24, 
		DECIMAL=25, NEWLINE=26, WS=27, STRINGLITERAL=28, COMMENT=29;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_constantline = 2, RULE_directiveline = 3, 
		RULE_directive = 4, RULE_orgdir = 5, RULE_worddir = 6, RULE_asciizdir = 7, 
		RULE_dbdir = 8, RULE_instrline = 9, RULE_symbolline = 10, RULE_symbol = 11, 
		RULE_argument = 12, RULE_immediate = 13, RULE_number = 14;
	public static readonly string[] ruleNames = {
		"prog", "line", "constantline", "directiveline", "directive", "orgdir", 
		"worddir", "asciizdir", "dbdir", "instrline", "symbolline", "symbol", 
		"argument", "immediate", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'.'", "'org'", "'word'", "'asciiz'", "'db'", "','", "':'", 
		"'('", "')'", "'x'", "'y'", "'#'", "'<'", "'>'", "'+'", "'-'", "'*'", 
		"'&'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "INSTRUCTION", "LABEL", 
		"BINARY", "HEXADECIMAL", "DECIMAL", "NEWLINE", "WS", "STRINGLITERAL", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "D2Assembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static D2AssemblyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public D2AssemblyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public D2AssemblyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(D2AssemblyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << INSTRUCTION) | (1L << LABEL))) != 0)) {
				{
				{
				State = 30;
				line();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbollineContext symbolline() {
			return GetRuleContext<SymbollineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrlineContext instrline() {
			return GetRuleContext<InstrlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivelineContext directiveline() {
			return GetRuleContext<DirectivelineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantlineContext constantline() {
			return GetRuleContext<ConstantlineContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				symbolline();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				instrline();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				directiveline();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				constantline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(D2AssemblyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(D2AssemblyParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL() { return GetToken(D2AssemblyParser.HEXADECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(D2AssemblyParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(D2AssemblyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(D2AssemblyParser.NEWLINE, i);
		}
		public ConstantlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantlineContext constantline() {
		ConstantlineContext _localctx = new ConstantlineContext(Context, State);
		EnterRule(_localctx, 4, RULE_constantline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(LABEL);
			State = 45;
			Match(T__0);
			State = 46;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BINARY) | (1L << HEXADECIMAL) | (1L << DECIMAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 47;
				Match(NEWLINE);
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivelineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(D2AssemblyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(D2AssemblyParser.NEWLINE, i);
		}
		public DirectivelineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivelineContext directiveline() {
		DirectivelineContext _localctx = new DirectivelineContext(Context, State);
		EnterRule(_localctx, 6, RULE_directiveline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LABEL) {
				{
				State = 52;
				symbol();
				}
			}

			State = 55;
			directive();
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 56;
				Match(NEWLINE);
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrgdirContext orgdir() {
			return GetRuleContext<OrgdirContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorddirContext worddir() {
			return GetRuleContext<WorddirContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsciizdirContext asciizdir() {
			return GetRuleContext<AsciizdirContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DbdirContext dbdir() {
			return GetRuleContext<DbdirContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__1);
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 62;
				orgdir();
				}
				break;
			case T__3:
				{
				State = 63;
				worddir();
				}
				break;
			case T__4:
				{
				State = 64;
				asciizdir();
				}
				break;
			case T__5:
				{
				State = 65;
				dbdir();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgdirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public OrgdirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orgdir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrgdir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgdirContext orgdir() {
		OrgdirContext _localctx = new OrgdirContext(Context, State);
		EnterRule(_localctx, 10, RULE_orgdir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__2);
			State = 69;
			number(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorddirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public WorddirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worddir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWorddir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WorddirContext worddir() {
		WorddirContext _localctx = new WorddirContext(Context, State);
		EnterRule(_localctx, 12, RULE_worddir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__3);
			State = 72;
			number(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsciizdirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(D2AssemblyParser.STRINGLITERAL, 0); }
		public AsciizdirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asciizdir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsciizdir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsciizdirContext asciizdir() {
		AsciizdirContext _localctx = new AsciizdirContext(Context, State);
		EnterRule(_localctx, 14, RULE_asciizdir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__4);
			State = 75;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbdirContext : ParserRuleContext {
		public NumberContext _number;
		public IList<NumberContext> _nums = new List<NumberContext>();
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public DbdirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbdir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbdir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DbdirContext dbdir() {
		DbdirContext _localctx = new DbdirContext(Context, State);
		EnterRule(_localctx, 16, RULE_dbdir);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(T__5);
			State = 78;
			_localctx._number = number(0);
			_localctx._nums.Add(_localctx._number);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 79;
				Match(T__6);
				State = 80;
				_localctx._number = number(0);
				_localctx._nums.Add(_localctx._number);
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTION() { return GetToken(D2AssemblyParser.INSTRUCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(D2AssemblyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(D2AssemblyParser.NEWLINE, i);
		}
		public InstrlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrlineContext instrline() {
		InstrlineContext _localctx = new InstrlineContext(Context, State);
		EnterRule(_localctx, 18, RULE_instrline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LABEL) {
				{
				State = 86;
				symbol();
				}
			}

			State = 89;
			Match(INSTRUCTION);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << LABEL) | (1L << BINARY) | (1L << HEXADECIMAL) | (1L << DECIMAL))) != 0)) {
				{
				State = 90;
				argument();
				}
			}

			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 93;
				Match(NEWLINE);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbollineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(D2AssemblyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(D2AssemblyParser.NEWLINE, i);
		}
		public SymbollineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbollineContext symbolline() {
		SymbollineContext _localctx = new SymbollineContext(Context, State);
		EnterRule(_localctx, 20, RULE_symbolline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			symbol();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 99;
				Match(NEWLINE);
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(D2AssemblyParser.LABEL, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 22, RULE_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(LABEL);
			State = 105;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public IToken indirect;
		public IToken indirectx;
		public IToken indirecty;
		public IToken x;
		public IToken y;
		[System.Diagnostics.DebuggerNonUserCode] public ImmediateContext immediate() {
			return GetRuleContext<ImmediateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				immediate();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				_localctx.indirect = Match(T__8);
				State = 109;
				number(0);
				State = 110;
				Match(T__9);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				Match(T__8);
				State = 113;
				number(0);
				State = 114;
				Match(T__9);
				State = 115;
				Match(T__6);
				State = 116;
				_localctx.indirectx = Match(T__10);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 118;
				Match(T__8);
				State = 119;
				number(0);
				State = 120;
				Match(T__9);
				State = 121;
				Match(T__6);
				State = 122;
				_localctx.indirecty = Match(T__11);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 124;
				number(0);
				State = 125;
				Match(T__6);
				State = 126;
				_localctx.x = Match(T__10);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 128;
				number(0);
				State = 129;
				Match(T__6);
				State = 130;
				_localctx.y = Match(T__11);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 132;
				number(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmediateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ImmediateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immediate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmediate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmediateContext immediate() {
		ImmediateContext _localctx = new ImmediateContext(Context, State);
		EnterRule(_localctx, 26, RULE_immediate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(T__12);
			State = 136;
			number(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public IToken bin;
		public IToken hex;
		public IToken dec;
		public IToken lab;
		public IToken lowbyte;
		public IToken highbyte;
		public IToken plus;
		public IToken minus;
		public IToken mult;
		public IToken and;
		public IToken or;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(D2AssemblyParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL() { return GetToken(D2AssemblyParser.HEXADECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(D2AssemblyParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(D2AssemblyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2AssemblyVisitor<TResult> typedVisitor = visitor as ID2AssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		return number(0);
	}

	private NumberContext number(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumberContext _localctx = new NumberContext(Context, _parentState);
		NumberContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_number, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				{
				State = 139;
				_localctx.bin = Match(BINARY);
				}
				break;
			case HEXADECIMAL:
				{
				State = 140;
				_localctx.hex = Match(HEXADECIMAL);
				}
				break;
			case DECIMAL:
				{
				State = 141;
				_localctx.dec = Match(DECIMAL);
				}
				break;
			case LABEL:
				{
				State = 142;
				_localctx.lab = Match(LABEL);
				}
				break;
			case T__13:
				{
				State = 143;
				_localctx.lowbyte = Match(T__13);
				State = 144;
				number(7);
				}
				break;
			case T__14:
				{
				State = 145;
				_localctx.highbyte = Match(T__14);
				State = 146;
				number(6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 164;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new NumberContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_number);
						State = 149;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 150;
						_localctx.plus = Match(T__15);
						State = 151;
						number(6);
						}
						break;
					case 2:
						{
						_localctx = new NumberContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_number);
						State = 152;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 153;
						_localctx.minus = Match(T__16);
						State = 154;
						number(5);
						}
						break;
					case 3:
						{
						_localctx = new NumberContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_number);
						State = 155;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 156;
						_localctx.mult = Match(T__17);
						State = 157;
						number(4);
						}
						break;
					case 4:
						{
						_localctx = new NumberContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_number);
						State = 158;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 159;
						_localctx.and = Match(T__18);
						State = 160;
						number(3);
						}
						break;
					case 5:
						{
						_localctx = new NumberContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_number);
						State = 161;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 162;
						_localctx.or = Match(T__19);
						State = 163;
						number(2);
						}
						break;
					}
					} 
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return number_sempred((NumberContext)_localctx, predIndex);
		}
		return true;
	}
	private bool number_sempred(NumberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\xAC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\a', '\x2', '\"', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '%', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '\x33', '\n', '\x4', 
		'\r', '\x4', '\xE', '\x4', '\x34', '\x3', '\x5', '\x5', '\x5', '\x38', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '<', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '=', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x45', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', 'T', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'W', '\v', '\n', '\x3', '\v', '\x5', '\v', 'Z', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '^', '\n', '\v', '\x3', '\v', '\x6', '\v', '\x61', 
		'\n', '\v', '\r', '\v', '\xE', '\v', '\x62', '\x3', '\f', '\x3', '\f', 
		'\x6', '\f', 'g', '\n', '\f', '\r', '\f', '\xE', '\f', 'h', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x88', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x96', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\xA7', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xAA', '\v', 
		'\x10', '\x3', '\x10', '\x2', '\x3', '\x1E', '\x11', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', '\x2', '\x3', '\x3', '\x2', '\x19', '\x1B', '\x2', '\xBB', 
		'\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x4', ',', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '.', '\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\n', '?', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'I', '\x3', '\x2', '\x2', '\x2', '\x10', 'L', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'O', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x16', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x18', 'j', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x95', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x5', '\x4', '\x3', '\x2', 
		'!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', 
		'\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '&', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\a', '\x2', '\x2', '\x3', '\'', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '(', '-', '\x5', '\x16', '\f', '\x2', ')', '-', '\x5', '\x14', 
		'\v', '\x2', '*', '-', '\x5', '\b', '\x5', '\x2', '+', '-', '\x5', '\x6', 
		'\x4', '\x2', ',', '(', '\x3', '\x2', '\x2', '\x2', ',', ')', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x5', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', 
		'\x18', '\x2', '\x2', '/', '\x30', '\a', '\x3', '\x2', '\x2', '\x30', 
		'\x32', '\t', '\x2', '\x2', '\x2', '\x31', '\x33', '\a', '\x1C', '\x2', 
		'\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x38', '\x5', '\x18', '\r', '\x2', '\x37', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x5', '\n', '\x6', '\x2', 
		':', '<', '\a', '\x1C', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\t', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x44', '\a', '\x4', '\x2', '\x2', '@', '\x45', '\x5', '\f', 
		'\a', '\x2', '\x41', '\x45', '\x5', '\xE', '\b', '\x2', '\x42', '\x45', 
		'\x5', '\x10', '\t', '\x2', '\x43', '\x45', '\x5', '\x12', '\n', '\x2', 
		'\x44', '@', '\x3', '\x2', '\x2', '\x2', '\x44', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\a', '\x5', '\x2', '\x2', 'G', 'H', '\x5', '\x1E', '\x10', 
		'\x2', 'H', '\r', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x6', '\x2', 
		'\x2', 'J', 'K', '\x5', '\x1E', '\x10', '\x2', 'K', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'M', '\a', '\a', '\x2', '\x2', 'M', 'N', '\a', '\x1E', 
		'\x2', '\x2', 'N', '\x11', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', 
		'\b', '\x2', '\x2', 'P', 'U', '\x5', '\x1E', '\x10', '\x2', 'Q', 'R', 
		'\a', '\t', '\x2', '\x2', 'R', 'T', '\x5', '\x1E', '\x10', '\x2', 'S', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x13', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Z', '\x5', '\x18', '\r', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', 
		'\x2', '[', ']', '\a', '\x17', '\x2', '\x2', '\\', '^', '\x5', '\x1A', 
		'\xE', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', 
		'\x2', '\x2', '\x2', '^', '`', '\x3', '\x2', '\x2', '\x2', '_', '\x61', 
		'\a', '\x1C', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x66', '\x5', '\x18', '\r', '\x2', '\x65', 
		'g', '\a', '\x1C', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', '\x17', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\a', '\x18', '\x2', '\x2', 'k', 'l', '\a', 
		'\n', '\x2', '\x2', 'l', '\x19', '\x3', '\x2', '\x2', '\x2', 'm', '\x88', 
		'\x5', '\x1C', '\xF', '\x2', 'n', 'o', '\a', '\v', '\x2', '\x2', 'o', 
		'p', '\x5', '\x1E', '\x10', '\x2', 'p', 'q', '\a', '\f', '\x2', '\x2', 
		'q', '\x88', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\v', '\x2', 
		'\x2', 's', 't', '\x5', '\x1E', '\x10', '\x2', 't', 'u', '\a', '\f', '\x2', 
		'\x2', 'u', 'v', '\a', '\t', '\x2', '\x2', 'v', 'w', '\a', '\r', '\x2', 
		'\x2', 'w', '\x88', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\v', 
		'\x2', '\x2', 'y', 'z', '\x5', '\x1E', '\x10', '\x2', 'z', '{', '\a', 
		'\f', '\x2', '\x2', '{', '|', '\a', '\t', '\x2', '\x2', '|', '}', '\a', 
		'\xE', '\x2', '\x2', '}', '\x88', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\x1E', '\x10', '\x2', '\x7F', '\x80', '\a', '\t', '\x2', '\x2', 
		'\x80', '\x81', '\a', '\r', '\x2', '\x2', '\x81', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\x5', '\x1E', '\x10', '\x2', '\x83', '\x84', 
		'\a', '\t', '\x2', '\x2', '\x84', '\x85', '\a', '\xE', '\x2', '\x2', '\x85', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\x5', '\x1E', '\x10', 
		'\x2', '\x87', 'm', '\x3', '\x2', '\x2', '\x2', '\x87', 'n', '\x3', '\x2', 
		'\x2', '\x2', '\x87', 'r', '\x3', '\x2', '\x2', '\x2', '\x87', 'x', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '~', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', 
		'\xF', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x1E', '\x10', '\x2', '\x8B', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\b', '\x10', '\x1', 
		'\x2', '\x8D', '\x96', '\a', '\x19', '\x2', '\x2', '\x8E', '\x96', '\a', 
		'\x1A', '\x2', '\x2', '\x8F', '\x96', '\a', '\x1B', '\x2', '\x2', '\x90', 
		'\x96', '\a', '\x18', '\x2', '\x2', '\x91', '\x92', '\a', '\x10', '\x2', 
		'\x2', '\x92', '\x96', '\x5', '\x1E', '\x10', '\t', '\x93', '\x94', '\a', 
		'\x11', '\x2', '\x2', '\x94', '\x96', '\x5', '\x1E', '\x10', '\b', '\x95', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x95', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x91', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\f', '\a', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\x12', '\x2', '\x2', '\x99', '\xA7', '\x5', '\x1E', '\x10', '\b', '\x9A', 
		'\x9B', '\f', '\x6', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x13', '\x2', 
		'\x2', '\x9C', '\xA7', '\x5', '\x1E', '\x10', '\a', '\x9D', '\x9E', '\f', 
		'\x5', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x14', '\x2', '\x2', '\x9F', 
		'\xA7', '\x5', '\x1E', '\x10', '\x6', '\xA0', '\xA1', '\f', '\x4', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\x15', '\x2', '\x2', '\xA2', '\xA7', '\x5', 
		'\x1E', '\x10', '\x5', '\xA3', '\xA4', '\f', '\x3', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x16', '\x2', '\x2', '\xA5', '\xA7', '\x5', '\x1E', '\x10', 
		'\x4', '\xA6', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '#', ',', '\x34', '\x37', '=', '\x44', 'U', 'Y', ']', '\x62', 
		'h', '\x87', '\x95', '\xA6', '\xA8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace D2Plugin
