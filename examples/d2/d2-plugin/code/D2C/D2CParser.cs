//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Daniel\winrepos\logix\examples\d2\d2-plugin\code\D2C\D2C.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class D2CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOR=1, BXOR=2, PLUS=3, INCREMENT=4, DECREMENT=5, MINUS=6, STAR=7, HASH=8, 
		AMPERSAND=9, DIV=10, EQ=11, EQEQ=12, NEQ=13, LESSTHAN=14, GREATHAN=15, 
		COMMA=16, SEMI=17, LPAREN=18, RPAREN=19, LCURLY=20, RCURLY=21, IF=22, 
		ELSE=23, ELSEIF=24, RETURN=25, FOR=26, WHILE=27, BREAK=28, DEFINE=29, 
		ORG=30, DECIMALLIT=31, HEXADECILIT=32, BINARYLIT=33, STRINGLIT=34, COMMENT=35, 
		ID=36, WS=37;
	public const int
		RULE_program = 0, RULE_preprocessordir = 1, RULE_preprodirs = 2, RULE_funcdef = 3, 
		RULE_block = 4, RULE_paramlist = 5, RULE_paramdecl = 6, RULE_statement = 7, 
		RULE_vardecl = 8, RULE_assignment = 9, RULE_funccall = 10, RULE_arglist = 11, 
		RULE_ifstatement = 12, RULE_ifstatementelse = 13, RULE_retstm = 14, RULE_whileloop = 15, 
		RULE_lvalue = 16, RULE_rvalue = 17, RULE_prefixop = 18, RULE_postfixop = 19, 
		RULE_binop = 20, RULE_type = 21, RULE_puretype = 22, RULE_pointertype = 23;
	public static readonly string[] ruleNames = {
		"program", "preprocessordir", "preprodirs", "funcdef", "block", "paramlist", 
		"paramdecl", "statement", "vardecl", "assignment", "funccall", "arglist", 
		"ifstatement", "ifstatementelse", "retstm", "whileloop", "lvalue", "rvalue", 
		"prefixop", "postfixop", "binop", "type", "puretype", "pointertype"
	};

	private static readonly string[] _LiteralNames = {
		null, "'|'", "'^'", "'+'", "'++'", "'--'", "'-'", "'*'", "'#'", "'&'", 
		"'/'", "'='", "'=='", "'!='", "'<'", "'>'", "','", "';'", "'('", "')'", 
		"'{'", "'}'", "'if'", "'else'", "'elseif'", "'return'", "'for'", "'while'", 
		"'break'", "'define'", "'org'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOR", "BXOR", "PLUS", "INCREMENT", "DECREMENT", "MINUS", "STAR", 
		"HASH", "AMPERSAND", "DIV", "EQ", "EQEQ", "NEQ", "LESSTHAN", "GREATHAN", 
		"COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "IF", "ELSE", 
		"ELSEIF", "RETURN", "FOR", "WHILE", "BREAK", "DEFINE", "ORG", "DECIMALLIT", 
		"HEXADECILIT", "BINARYLIT", "STRINGLIT", "COMMENT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "D2C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static D2CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public D2CParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public D2CParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessordirContext[] preprocessordir() {
			return GetRuleContexts<PreprocessordirContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessordirContext preprocessordir(int i) {
			return GetRuleContext<PreprocessordirContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext[] funcdef() {
			return GetRuleContexts<FuncdefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef(int i) {
			return GetRuleContext<FuncdefContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 48;
				preprocessordir();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 54;
				funcdef();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessordirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(D2CParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreprodirsContext preprodirs() {
			return GetRuleContext<PreprodirsContext>(0);
		}
		public PreprocessordirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessordir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessordir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessordirContext preprocessordir() {
		PreprocessordirContext _localctx = new PreprocessordirContext(Context, State);
		EnterRule(_localctx, 2, RULE_preprocessordir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(HASH);
			State = 61;
			preprodirs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprodirsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(D2CParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(D2CParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public PreprodirsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprodirs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprodirs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprodirsContext preprodirs() {
		PreprodirsContext _localctx = new PreprodirsContext(Context, State);
		EnterRule(_localctx, 4, RULE_preprodirs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(DEFINE);
			State = 64;
			Match(ID);
			State = 65;
			rvalue(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(D2CParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(D2CParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamlistContext paramlist() {
			return GetRuleContext<ParamlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(D2CParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefContext funcdef() {
		FuncdefContext _localctx = new FuncdefContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcdef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			type();
			State = 68;
			Match(ID);
			State = 69;
			Match(LPAREN);
			State = 70;
			paramlist();
			State = 71;
			Match(RPAREN);
			State = 72;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext stms;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(D2CParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(D2CParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(LCURLY);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << MINUS) | (1L << STAR) | (1L << AMPERSAND) | (1L << LPAREN) | (1L << IF) | (1L << RETURN) | (1L << WHILE) | (1L << BREAK) | (1L << DECIMALLIT) | (1L << HEXADECILIT) | (1L << BINARYLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
				{
				{
				State = 75;
				_localctx.stms = statement();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamlistContext : ParserRuleContext {
		public ParamdeclContext _paramdecl;
		public IList<ParamdeclContext> _decls = new List<ParamdeclContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(D2CParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(D2CParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext[] paramdecl() {
			return GetRuleContexts<ParamdeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamdeclContext paramdecl(int i) {
			return GetRuleContext<ParamdeclContext>(i);
		}
		public ParamlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamlistContext paramlist() {
		ParamlistContext _localctx = new ParamlistContext(Context, State);
		EnterRule(_localctx, 10, RULE_paramlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 83;
				_localctx._paramdecl = paramdecl();
				_localctx._decls.Add(_localctx._paramdecl);
				}
			}

			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 86;
				Match(COMMA);
				State = 87;
				_localctx._paramdecl = paramdecl();
				_localctx._decls.Add(_localctx._paramdecl);
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamdeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(D2CParser.ID, 0); }
		public ParamdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramdecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamdeclContext paramdecl() {
		ParamdeclContext _localctx = new ParamdeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramdecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			type();
			State = 94;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(D2CParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetstmContext retstm() {
			return GetRuleContext<RetstmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstatementContext ifstatement() {
			return GetRuleContext<IfstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileloopContext whileloop() {
			return GetRuleContext<WhileloopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(D2CParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				vardecl();
				State = 97;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				assignment();
				State = 100;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				retstm();
				State = 103;
				Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 105;
				ifstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106;
				whileloop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 107;
				Match(BREAK);
				State = 108;
				Match(SEMI);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 109;
				rvalue(0);
				State = 110;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(D2CParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(D2CParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public VardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardeclContext vardecl() {
		VardeclContext _localctx = new VardeclContext(Context, State);
		EnterRule(_localctx, 16, RULE_vardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			type();
			State = 115;
			Match(ID);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 116;
				Match(EQ);
				State = 117;
				rvalue(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(D2CParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			lvalue();
			State = 121;
			Match(EQ);
			State = 122;
			rvalue(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(D2CParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(D2CParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(D2CParser.RPAREN, 0); }
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 20, RULE_funccall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(ID);
			State = 125;
			Match(LPAREN);
			State = 126;
			arglist();
			State = 127;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		public RvalueContext _rvalue;
		public IList<RvalueContext> _args = new List<RvalueContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(D2CParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(D2CParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext[] rvalue() {
			return GetRuleContexts<RvalueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue(int i) {
			return GetRuleContext<RvalueContext>(i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 22, RULE_arglist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << MINUS) | (1L << STAR) | (1L << AMPERSAND) | (1L << LPAREN) | (1L << DECIMALLIT) | (1L << HEXADECILIT) | (1L << BINARYLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
				{
				State = 129;
				_localctx._rvalue = rvalue(0);
				_localctx._args.Add(_localctx._rvalue);
				}
			}

			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 132;
				Match(COMMA);
				State = 133;
				_localctx._rvalue = rvalue(0);
				_localctx._args.Add(_localctx._rvalue);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(D2CParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(D2CParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(D2CParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstatementelseContext ifstatementelse() {
			return GetRuleContext<IfstatementelseContext>(0);
		}
		public IfstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstatementContext ifstatement() {
		IfstatementContext _localctx = new IfstatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(IF);
			State = 140;
			Match(LPAREN);
			State = 141;
			rvalue(0);
			State = 142;
			Match(RPAREN);
			State = 143;
			block();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE || _la==ELSEIF) {
				{
				State = 144;
				ifstatementelse();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstatementelseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(D2CParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(D2CParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(D2CParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(D2CParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfstatementelseContext ifstatementelse() {
			return GetRuleContext<IfstatementelseContext>(0);
		}
		public IfstatementelseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstatementelse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstatementelse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstatementelseContext ifstatementelse() {
		IfstatementelseContext _localctx = new IfstatementelseContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifstatementelse);
		int _la;
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				Match(ELSE);
				State = 148;
				block();
				}
				break;
			case ELSEIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				Match(ELSEIF);
				State = 150;
				Match(LPAREN);
				State = 151;
				rvalue(0);
				State = 152;
				Match(RPAREN);
				State = 153;
				block();
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE || _la==ELSEIF) {
					{
					State = 154;
					ifstatementelse();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(D2CParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		public RetstmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstmContext retstm() {
		RetstmContext _localctx = new RetstmContext(Context, State);
		EnterRule(_localctx, 28, RULE_retstm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(RETURN);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << MINUS) | (1L << STAR) | (1L << AMPERSAND) | (1L << LPAREN) | (1L << DECIMALLIT) | (1L << HEXADECILIT) | (1L << BINARYLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
				{
				State = 160;
				rvalue(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileloopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(D2CParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(D2CParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue() {
			return GetRuleContext<RvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(D2CParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileloopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileloop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileloop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileloopContext whileloop() {
		WhileloopContext _localctx = new WhileloopContext(Context, State);
		EnterRule(_localctx, 30, RULE_whileloop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(WHILE);
			State = 164;
			Match(LPAREN);
			State = 165;
			rvalue(0);
			State = 166;
			Match(RPAREN);
			State = 167;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public IToken ptrlabel;
		public IToken ptrhex;
		public IToken ptrdec;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(D2CParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(D2CParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECILIT() { return GetToken(D2CParser.HEXADECILIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMALLIT() { return GetToken(D2CParser.DECIMALLIT, 0); }
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 32, RULE_lvalue);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				Match(STAR);
				State = 171;
				_localctx.ptrlabel = Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				Match(STAR);
				State = 173;
				_localctx.ptrhex = Match(HEXADECILIT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174;
				Match(STAR);
				State = 175;
				_localctx.ptrdec = Match(DECIMALLIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueContext : ParserRuleContext {
		public TypeContext casted;
		public RvalueContext paren;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(D2CParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(D2CParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(D2CParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext[] rvalue() {
			return GetRuleContexts<RvalueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RvalueContext rvalue(int i) {
			return GetRuleContext<RvalueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixopContext prefixop() {
			return GetRuleContext<PrefixopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMALLIT() { return GetToken(D2CParser.DECIMALLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECILIT() { return GetToken(D2CParser.HEXADECILIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARYLIT() { return GetToken(D2CParser.BINARYLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(D2CParser.STRINGLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixopContext postfixop() {
			return GetRuleContext<PostfixopContext>(0);
		}
		public RvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RvalueContext rvalue() {
		return rvalue(0);
	}

	private RvalueContext rvalue(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RvalueContext _localctx = new RvalueContext(Context, _parentState);
		RvalueContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_rvalue, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 179;
				Match(ID);
				}
				break;
			case 2:
				{
				State = 180;
				Match(LPAREN);
				State = 181;
				_localctx.casted = type();
				State = 182;
				Match(RPAREN);
				State = 183;
				rvalue(10);
				}
				break;
			case 3:
				{
				State = 185;
				Match(LPAREN);
				State = 186;
				_localctx.paren = rvalue(0);
				State = 187;
				Match(RPAREN);
				}
				break;
			case 4:
				{
				State = 189;
				prefixop();
				State = 190;
				rvalue(8);
				}
				break;
			case 5:
				{
				State = 192;
				funccall();
				}
				break;
			case 6:
				{
				State = 193;
				Match(DECIMALLIT);
				}
				break;
			case 7:
				{
				State = 194;
				Match(HEXADECILIT);
				}
				break;
			case 8:
				{
				State = 195;
				Match(BINARYLIT);
				}
				break;
			case 9:
				{
				State = 196;
				Match(STRINGLIT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 205;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 199;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 200;
						binop();
						State = 201;
						rvalue(7);
						}
						break;
					case 2:
						{
						_localctx = new RvalueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rvalue);
						State = 203;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 204;
						postfixop();
						}
						break;
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(D2CParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(D2CParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(D2CParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(D2CParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(D2CParser.AMPERSAND, 0); }
		public PrefixopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixopContext prefixop() {
		PrefixopContext _localctx = new PrefixopContext(Context, State);
		EnterRule(_localctx, 36, RULE_prefixop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCREMENT) | (1L << DECREMENT) | (1L << MINUS) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(D2CParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(D2CParser.DECREMENT, 0); }
		public PostfixopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixopContext postfixop() {
		PostfixopContext _localctx = new PostfixopContext(Context, State);
		EnterRule(_localctx, 38, RULE_postfixop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !(_la==INCREMENT || _la==DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(D2CParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(D2CParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ() { return GetToken(D2CParser.EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(D2CParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(D2CParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR() { return GetToken(D2CParser.BOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BXOR() { return GetToken(D2CParser.BXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(D2CParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATHAN() { return GetToken(D2CParser.GREATHAN, 0); }
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 40, RULE_binop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOR) | (1L << BXOR) | (1L << PLUS) | (1L << MINUS) | (1L << AMPERSAND) | (1L << EQEQ) | (1L << NEQ) | (1L << LESSTHAN) | (1L << GREATHAN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PuretypeContext puretype() {
			return GetRuleContext<PuretypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointertypeContext pointertype() {
			return GetRuleContext<PointertypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_type);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				puretype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				pointertype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PuretypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(D2CParser.ID, 0); }
		public PuretypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_puretype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPuretype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PuretypeContext puretype() {
		PuretypeContext _localctx = new PuretypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_puretype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointertypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PuretypeContext puretype() {
			return GetRuleContext<PuretypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(D2CParser.STAR, 0); }
		public PointertypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointertype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ID2CVisitor<TResult> typedVisitor = visitor as ID2CVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointertype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointertypeContext pointertype() {
		PointertypeContext _localctx = new PointertypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_pointertype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			puretype();
			State = 223;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return rvalue_sempred((RvalueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rvalue_sempred(RvalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xE4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x2', 
		'\a', '\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', 'O', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'R', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x5', '\a', 
		'W', '\n', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '[', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '^', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', 's', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', 'y', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x5', '\r', '\x85', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x89', '\n', '\r', '\f', '\r', '\xE', '\r', '\x8C', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x94', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x9E', '\n', '\xF', '\x5', 
		'\xF', '\xA0', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xA4', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\xB3', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xC8', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\xD0', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xD3', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xDD', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x2', '\x3', '$', '\x1A', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x2', '\x5', '\x4', '\x2', '\x6', '\t', '\v', '\v', '\x3', '\x2', '\x6', 
		'\a', '\x6', '\x2', '\x3', '\x5', '\b', '\b', '\v', '\v', '\xE', '\x11', 
		'\x2', '\xEB', '\x2', '\x35', '\x3', '\x2', '\x2', '\x2', '\x4', '>', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x45', '\x3', '\x2', '\x2', '\x2', '\n', 'L', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'V', '\x3', '\x2', '\x2', '\x2', '\xE', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'r', '\x3', '\x2', '\x2', '\x2', '\x12', 't', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'z', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x18', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xA1', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\"', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xC7', '\x3', '\x2', '\x2', '\x2', '&', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xD6', '\x3', '\x2', '\x2', '\x2', '*', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xDC', '\x3', '\x2', '\x2', '\x2', '.', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\x5', '\x4', '\x3', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', ';', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x38', ':', '\x5', '\b', '\x5', '\x2', '\x39', '\x38', 
		'\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x3', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\a', '\n', '\x2', '\x2', '?', '@', '\x5', '\x6', '\x4', 
		'\x2', '@', '\x5', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x1F', 
		'\x2', '\x2', '\x42', '\x43', '\a', '&', '\x2', '\x2', '\x43', '\x44', 
		'\x5', '$', '\x13', '\x2', '\x44', '\a', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\x5', ',', '\x17', '\x2', '\x46', 'G', '\a', '&', '\x2', '\x2', 
		'G', 'H', '\a', '\x14', '\x2', '\x2', 'H', 'I', '\x5', '\f', '\a', '\x2', 
		'I', 'J', '\a', '\x15', '\x2', '\x2', 'J', 'K', '\x5', '\n', '\x6', '\x2', 
		'K', '\t', '\x3', '\x2', '\x2', '\x2', 'L', 'P', '\a', '\x16', '\x2', 
		'\x2', 'M', 'O', '\x5', '\x10', '\t', '\x2', 'N', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x17', '\x2', 
		'\x2', 'T', '\v', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x5', '\xE', 
		'\b', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', '\\', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x12', 
		'\x2', '\x2', 'Y', '[', '\x5', '\xE', '\b', '\x2', 'Z', 'X', '\x3', '\x2', 
		'\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\r', 
		'\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x5', ',', '\x17', '\x2', '`', '\x61', '\a', '&', '\x2', '\x2', 
		'\x61', '\xF', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x5', '\x12', 
		'\n', '\x2', '\x63', '\x64', '\a', '\x13', '\x2', '\x2', '\x64', 's', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x5', '\x14', '\v', '\x2', 
		'\x66', 'g', '\a', '\x13', '\x2', '\x2', 'g', 's', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x5', '\x1E', '\x10', '\x2', 'i', 'j', '\a', '\x13', 
		'\x2', '\x2', 'j', 's', '\x3', '\x2', '\x2', '\x2', 'k', 's', '\x5', '\x1A', 
		'\xE', '\x2', 'l', 's', '\x5', ' ', '\x11', '\x2', 'm', 'n', '\a', '\x1E', 
		'\x2', '\x2', 'n', 's', '\a', '\x13', '\x2', '\x2', 'o', 'p', '\x5', '$', 
		'\x13', '\x2', 'p', 'q', '\a', '\x13', '\x2', '\x2', 'q', 's', '\x3', 
		'\x2', '\x2', '\x2', 'r', '\x62', '\x3', '\x2', '\x2', '\x2', 'r', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'r', 'h', '\x3', '\x2', '\x2', '\x2', 'r', 
		'k', '\x3', '\x2', '\x2', '\x2', 'r', 'l', '\x3', '\x2', '\x2', '\x2', 
		'r', 'm', '\x3', '\x2', '\x2', '\x2', 'r', 'o', '\x3', '\x2', '\x2', '\x2', 
		's', '\x11', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x5', ',', '\x17', 
		'\x2', 'u', 'x', '\a', '&', '\x2', '\x2', 'v', 'w', '\a', '\r', '\x2', 
		'\x2', 'w', 'y', '\x5', '$', '\x13', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\x5', '\"', '\x12', '\x2', '{', '|', '\a', '\r', 
		'\x2', '\x2', '|', '}', '\x5', '$', '\x13', '\x2', '}', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\a', '&', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\x14', '\x2', '\x2', '\x80', '\x81', '\x5', '\x18', '\r', '\x2', 
		'\x81', '\x82', '\a', '\x15', '\x2', '\x2', '\x82', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x85', '\x5', '$', '\x13', '\x2', '\x84', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x12', 
		'\x2', '\x2', '\x87', '\x89', '\x5', '$', '\x13', '\x2', '\x88', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x18', '\x2', '\x2', 
		'\x8E', '\x8F', '\a', '\x14', '\x2', '\x2', '\x8F', '\x90', '\x5', '$', 
		'\x13', '\x2', '\x90', '\x91', '\a', '\x15', '\x2', '\x2', '\x91', '\x93', 
		'\x5', '\n', '\x6', '\x2', '\x92', '\x94', '\x5', '\x1C', '\xF', '\x2', 
		'\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', 
		'\a', '\x19', '\x2', '\x2', '\x96', '\xA0', '\x5', '\n', '\x6', '\x2', 
		'\x97', '\x98', '\a', '\x1A', '\x2', '\x2', '\x98', '\x99', '\a', '\x14', 
		'\x2', '\x2', '\x99', '\x9A', '\x5', '$', '\x13', '\x2', '\x9A', '\x9B', 
		'\a', '\x15', '\x2', '\x2', '\x9B', '\x9D', '\x5', '\n', '\x6', '\x2', 
		'\x9C', '\x9E', '\x5', '\x1C', '\xF', '\x2', '\x9D', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA3', '\a', '\x1B', '\x2', '\x2', '\xA2', '\xA4', 
		'\x5', '$', '\x13', '\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA6', '\a', '\x1D', '\x2', '\x2', '\xA6', '\xA7', 
		'\a', '\x14', '\x2', '\x2', '\xA7', '\xA8', '\x5', '$', '\x13', '\x2', 
		'\xA8', '\xA9', '\a', '\x15', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\n', 
		'\x6', '\x2', '\xAA', '!', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xB3', 
		'\a', '&', '\x2', '\x2', '\xAC', '\xAD', '\a', '\t', '\x2', '\x2', '\xAD', 
		'\xB3', '\a', '&', '\x2', '\x2', '\xAE', '\xAF', '\a', '\t', '\x2', '\x2', 
		'\xAF', '\xB3', '\a', '\"', '\x2', '\x2', '\xB0', '\xB1', '\a', '\t', 
		'\x2', '\x2', '\xB1', '\xB3', '\a', '!', '\x2', '\x2', '\xB2', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '#', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\b', '\x13', '\x1', '\x2', '\xB5', '\xC8', '\a', '&', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x14', '\x2', '\x2', '\xB7', '\xB8', '\x5', ',', '\x17', 
		'\x2', '\xB8', '\xB9', '\a', '\x15', '\x2', '\x2', '\xB9', '\xBA', '\x5', 
		'$', '\x13', '\f', '\xBA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\x14', '\x2', '\x2', '\xBC', '\xBD', '\x5', '$', '\x13', 
		'\x2', '\xBD', '\xBE', '\a', '\x15', '\x2', '\x2', '\xBE', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\x5', '&', '\x14', '\x2', '\xC0', 
		'\xC1', '\x5', '$', '\x13', '\n', '\xC1', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC8', '\x5', '\x16', '\f', '\x2', '\xC3', '\xC8', '\a', 
		'!', '\x2', '\x2', '\xC4', '\xC8', '\a', '\"', '\x2', '\x2', '\xC5', '\xC8', 
		'\a', '#', '\x2', '\x2', '\xC6', '\xC8', '\a', '$', '\x2', '\x2', '\xC7', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\f', '\b', '\x2', '\x2', '\xCA', '\xCB', '\x5', '*', '\x16', 
		'\x2', '\xCB', '\xCC', '\x5', '$', '\x13', '\t', '\xCC', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\f', '\t', '\x2', '\x2', '\xCE', 
		'\xD0', '\x5', '(', '\x15', '\x2', '\xCF', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\t', 
		'\x2', '\x2', '\x2', '\xD5', '\'', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\t', '\x3', '\x2', '\x2', '\xD7', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD9', '\t', '\x4', '\x2', '\x2', '\xD9', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDD', '\x5', '.', '\x18', '\x2', '\xDB', '\xDD', 
		'\x5', '\x30', '\x19', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDF', '\a', '&', '\x2', '\x2', '\xDF', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\x5', '.', '\x18', '\x2', '\xE1', 
		'\xE2', '\a', '\t', '\x2', '\x2', '\xE2', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x35', ';', 'P', 'V', '\\', 'r', 'x', '\x84', '\x8A', 
		'\x93', '\x9D', '\x9F', '\xA3', '\xB2', '\xC7', '\xCF', '\xD1', '\xDC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
