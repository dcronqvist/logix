//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/dcronqvist/repos/logix/assets/plugins/flisp-plugin/code/FLISPC/FLISPC.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class FLISPCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, SYMBOL=16, 
		LITERAL=17, WS=18;
	public const int
		RULE_program = 0, RULE_funcdef = 1, RULE_block = 2, RULE_statement = 3, 
		RULE_whilestatement = 4, RULE_ifstatement = 5, RULE_paramlist = 6, RULE_funccall = 7, 
		RULE_arglist = 8, RULE_declaration = 9, RULE_assignment = 10, RULE_return = 11, 
		RULE_expr = 12;
	public static readonly string[] ruleNames = {
		"program", "funcdef", "block", "statement", "whilestatement", "ifstatement", 
		"paramlist", "funccall", "arglist", "declaration", "assignment", "return", 
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'byte'", "'('", "')'", "'{'", "'}'", "'while'", "'if'", "'else'", 
		"','", "'='", "';'", "'return'", "'*'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "SYMBOL", "LITERAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FLISPC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FLISPCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FLISPCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FLISPCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public FuncdefContext _funcdef;
		public IList<FuncdefContext> _funcs = new List<FuncdefContext>();
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext[] funcdef() {
			return GetRuleContexts<FuncdefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef(int i) {
			return GetRuleContext<FuncdefContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 26;
				_localctx._funcdef = funcdef();
				_localctx._funcs.Add(_localctx._funcdef);
				}
				break;
			}
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 29;
				_localctx._funcdef = funcdef();
				_localctx._funcs.Add(_localctx._funcdef);
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(FLISPCParser.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamlistContext paramlist() {
			return GetRuleContext<ParamlistContext>(0);
		}
		public FuncdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefContext funcdef() {
		FuncdefContext _localctx = new FuncdefContext(Context, State);
		EnterRule(_localctx, 2, RULE_funcdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(T__0);
			State = 36;
			Match(SYMBOL);
			State = 37;
			Match(T__1);
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 38;
				paramlist();
				}
			}

			State = 41;
			Match(T__2);
			State = 42;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _lines = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(T__3);
			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 45;
				_localctx._statement = statement();
				_localctx._lines.Add(_localctx._statement);
				}
				break;
			}
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__6) | (1L << T__11) | (1L << SYMBOL))) != 0)) {
				{
				{
				State = 48;
				_localctx._statement = statement();
				_localctx._lines.Add(_localctx._statement);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstatementContext ifstatement() {
			return GetRuleContext<IfstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhilestatementContext whilestatement() {
			return GetRuleContext<WhilestatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				declaration();
				}
				break;
			case SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				assignment();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 58;
				ifstatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 59;
				whilestatement();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 60;
				@return();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestatementContext : ParserRuleContext {
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhilestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestatementContext whilestatement() {
		WhilestatementContext _localctx = new WhilestatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_whilestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__5);
			State = 64;
			Match(T__1);
			State = 65;
			_localctx.cond = expr(0);
			State = 66;
			Match(T__2);
			State = 67;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstatementContext : ParserRuleContext {
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IfstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstatementContext ifstatement() {
		IfstatementContext _localctx = new IfstatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(T__6);
			State = 70;
			Match(T__1);
			State = 71;
			_localctx.cond = expr(0);
			State = 72;
			Match(T__2);
			State = 73;
			block();
			State = 74;
			Match(T__7);
			State = 75;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamlistContext : ParserRuleContext {
		public IToken s1;
		public IList<IToken> _params = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYMBOL() { return GetTokens(FLISPCParser.SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL(int i) {
			return GetToken(FLISPCParser.SYMBOL, i);
		}
		public ParamlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamlistContext paramlist() {
		ParamlistContext _localctx = new ParamlistContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_localctx.s1 = Match(T__0);
			_localctx._params.Add(_localctx.s1);
			State = 78;
			Match(SYMBOL);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 79;
				Match(T__8);
				State = 80;
				_localctx.s1 = Match(T__0);
				_localctx._params.Add(_localctx.s1);
				State = 81;
				Match(SYMBOL);
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(FLISPCParser.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 14, RULE_funccall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(SYMBOL);
			State = 88;
			Match(T__1);
			State = 89;
			arglist();
			State = 90;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		public ExprContext _expr;
		public IList<ExprContext> _exprs = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 16, RULE_arglist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_localctx._expr = expr(0);
			_localctx._exprs.Add(_localctx._expr);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 93;
				Match(T__8);
				State = 94;
				_localctx._expr = expr(0);
				_localctx._exprs.Add(_localctx._expr);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(FLISPCParser.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__0);
			State = 101;
			Match(SYMBOL);
			State = 102;
			Match(T__9);
			State = 103;
			expr(0);
			State = 104;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(FLISPCParser.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(SYMBOL);
			State = 107;
			Match(T__9);
			State = 108;
			expr(0);
			State = 109;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 22, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__11);
			State = 112;
			expr(0);
			State = 113;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public FunccallContext func;
		public ExprContext paren;
		public IToken mult;
		public IToken add;
		public IToken sub;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(FLISPCParser.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(FLISPCParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPCVisitor<TResult> typedVisitor = visitor as IFLISPCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 116;
				Match(SYMBOL);
				}
				break;
			case 2:
				{
				State = 117;
				Match(LITERAL);
				}
				break;
			case 3:
				{
				State = 118;
				_localctx.func = funccall();
				}
				break;
			case 4:
				{
				State = 119;
				Match(T__1);
				State = 120;
				_localctx.paren = expr(0);
				State = 121;
				Match(T__2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 134;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 125;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 126;
						_localctx.mult = Match(T__12);
						State = 127;
						expr(6);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 128;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 129;
						_localctx.add = Match(T__13);
						State = 130;
						expr(5);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 131;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 132;
						_localctx.sub = Match(T__14);
						State = 133;
						expr(4);
						}
						break;
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', '\x8E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x5', '\x2', '\x1E', '\n', '\x2', '\x3', '\x2', 
		'\a', '\x2', '!', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '$', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'*', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x31', '\n', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x34', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x37', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '@', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', 'U', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'X', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x62', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x65', '\v', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '~', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\x89', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\x8C', '\v', '\xE', '\x3', '\xE', '\x2', '\x3', '\x1A', '\xF', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x2', '\x2', '\x2', '\x91', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '%', '\x3', '\x2', '\x2', '\x2', '\x6', '.', '\x3', 
		'\x2', '\x2', '\x2', '\b', '?', '\x3', '\x2', '\x2', '\x2', '\n', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'G', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x10', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '^', '\x3', '\x2', '\x2', '\x2', '\x14', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'l', '\x3', '\x2', '\x2', '\x2', '\x18', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '}', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1E', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '!', '\x5', '\x4', '\x3', '\x2', ' ', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', '\"', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', 
		'#', '\x3', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '\x3', '\x2', '\x2', '&', '\'', '\a', '\x12', '\x2', 
		'\x2', '\'', ')', '\a', '\x4', '\x2', '\x2', '(', '*', '\x5', '\xE', '\b', 
		'\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x5', '\x2', 
		'\x2', ',', '-', '\x5', '\x6', '\x4', '\x2', '-', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x30', '\a', '\x6', '\x2', '\x2', '/', '\x31', '\x5', 
		'\b', '\x5', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\x5', '\b', '\x5', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\a', '\x2', '\x2', '\x39', '\a', 
		'\x3', '\x2', '\x2', '\x2', ':', '@', '\x5', '\x14', '\v', '\x2', ';', 
		'@', '\x5', '\x16', '\f', '\x2', '<', '@', '\x5', '\f', '\a', '\x2', '=', 
		'@', '\x5', '\n', '\x6', '\x2', '>', '@', '\x5', '\x18', '\r', '\x2', 
		'?', ':', '\x3', '\x2', '\x2', '\x2', '?', ';', '\x3', '\x2', '\x2', '\x2', 
		'?', '<', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\b', '\x2', '\x2', '\x42', '\x43', '\a', 
		'\x4', '\x2', '\x2', '\x43', '\x44', '\x5', '\x1A', '\xE', '\x2', '\x44', 
		'\x45', '\a', '\x5', '\x2', '\x2', '\x45', '\x46', '\x5', '\x6', '\x4', 
		'\x2', '\x46', '\v', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\t', 
		'\x2', '\x2', 'H', 'I', '\a', '\x4', '\x2', '\x2', 'I', 'J', '\x5', '\x1A', 
		'\xE', '\x2', 'J', 'K', '\a', '\x5', '\x2', '\x2', 'K', 'L', '\x5', '\x6', 
		'\x4', '\x2', 'L', 'M', '\a', '\n', '\x2', '\x2', 'M', 'N', '\x5', '\x6', 
		'\x4', '\x2', 'N', '\r', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\x3', 
		'\x2', '\x2', 'P', 'V', '\a', '\x12', '\x2', '\x2', 'Q', 'R', '\a', '\v', 
		'\x2', '\x2', 'R', 'S', '\a', '\x3', '\x2', '\x2', 'S', 'U', '\a', '\x12', 
		'\x2', '\x2', 'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', '\xF', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x12', '\x2', '\x2', 'Z', '[', '\a', 
		'\x4', '\x2', '\x2', '[', '\\', '\x5', '\x12', '\n', '\x2', '\\', ']', 
		'\a', '\x5', '\x2', '\x2', ']', '\x11', '\x3', '\x2', '\x2', '\x2', '^', 
		'\x63', '\x5', '\x1A', '\xE', '\x2', '_', '`', '\a', '\v', '\x2', '\x2', 
		'`', '\x62', '\x5', '\x1A', '\xE', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\a', '\x3', '\x2', '\x2', 'g', 'h', '\a', '\x12', 
		'\x2', '\x2', 'h', 'i', '\a', '\f', '\x2', '\x2', 'i', 'j', '\x5', '\x1A', 
		'\xE', '\x2', 'j', 'k', '\a', '\r', '\x2', '\x2', 'k', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\a', '\x12', '\x2', '\x2', 'm', 'n', '\a', 
		'\f', '\x2', '\x2', 'n', 'o', '\x5', '\x1A', '\xE', '\x2', 'o', 'p', '\a', 
		'\r', '\x2', '\x2', 'p', '\x17', '\x3', '\x2', '\x2', '\x2', 'q', 'r', 
		'\a', '\xE', '\x2', '\x2', 'r', 's', '\x5', '\x1A', '\xE', '\x2', 's', 
		't', '\a', '\r', '\x2', '\x2', 't', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\b', '\xE', '\x1', '\x2', 'v', '~', '\a', '\x12', '\x2', '\x2', 
		'w', '~', '\a', '\x13', '\x2', '\x2', 'x', '~', '\x5', '\x10', '\t', '\x2', 
		'y', 'z', '\a', '\x4', '\x2', '\x2', 'z', '{', '\x5', '\x1A', '\xE', '\x2', 
		'{', '|', '\a', '\x5', '\x2', '\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', 
		'}', 'u', '\x3', '\x2', '\x2', '\x2', '}', 'w', '\x3', '\x2', '\x2', '\x2', 
		'}', 'x', '\x3', '\x2', '\x2', '\x2', '}', 'y', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\f', '\a', '\x2', 
		'\x2', '\x80', '\x81', '\a', '\xF', '\x2', '\x2', '\x81', '\x89', '\x5', 
		'\x1A', '\xE', '\b', '\x82', '\x83', '\f', '\x6', '\x2', '\x2', '\x83', 
		'\x84', '\a', '\x10', '\x2', '\x2', '\x84', '\x89', '\x5', '\x1A', '\xE', 
		'\a', '\x85', '\x86', '\f', '\x5', '\x2', '\x2', '\x86', '\x87', '\a', 
		'\x11', '\x2', '\x2', '\x87', '\x89', '\x5', '\x1A', '\xE', '\x6', '\x88', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x88', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x85', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\r', '\x1D', '\"', 
		')', '\x30', '\x35', '?', 'V', '\x63', '}', '\x88', '\x8A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
