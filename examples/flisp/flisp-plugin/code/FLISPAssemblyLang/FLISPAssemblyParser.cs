//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/dcronqvist/repos/logix/assets/plugins/flisp-plugin/code/FLISPAssemblyLang/FLISPAssembly.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class FLISPAssemblyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, STRINGLITERAL=9, 
		ISTRING=10, DECI=11, SYMB=12, HEXADECI=13, WS=14, DIGITS=15, LINEBREAK=16;
	public const int
		RULE_program = 0, RULE_linelist = 1, RULE_line = 2, RULE_directive = 3, 
		RULE_orgdir = 4, RULE_equdir = 5, RULE_fcbdir = 6, RULE_fcsdir = 7, RULE_rmbdir = 8, 
		RULE_instr = 9, RULE_numberlist = 10, RULE_immediate = 11, RULE_number = 12;
	public static readonly string[] ruleNames = {
		"program", "linelist", "line", "directive", "orgdir", "equdir", "fcbdir", 
		"fcsdir", "rmbdir", "instr", "numberlist", "immediate", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'ORG'", "'EQU'", "'FCB'", "'FCS'", "'RMB'", "','", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "STRINGLITERAL", 
		"ISTRING", "DECI", "SYMB", "HEXADECI", "WS", "DIGITS", "LINEBREAK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FLISPAssembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FLISPAssemblyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FLISPAssemblyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FLISPAssemblyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinelistContext linelist() {
			return GetRuleContext<LinelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FLISPAssemblyParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			linelist();
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinelistContext : ParserRuleContext {
		public LineContext _line;
		public IList<LineContext> _lines = new List<LineContext>();
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINEBREAK() { return GetTokens(FLISPAssemblyParser.LINEBREAK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEBREAK(int i) {
			return GetToken(FLISPAssemblyParser.LINEBREAK, i);
		}
		public LinelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinelistContext linelist() {
		LinelistContext _localctx = new LinelistContext(Context, State);
		EnterRule(_localctx, 2, RULE_linelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			_localctx._line = line();
			_localctx._lines.Add(_localctx._line);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINEBREAK) {
				{
				{
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 30;
					Match(LINEBREAK);
					}
					}
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINEBREAK );
				State = 35;
				_localctx._line = line();
				_localctx._lines.Add(_localctx._line);
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrContext instr() {
			return GetRuleContext<InstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMB() { return GetToken(FLISPAssemblyParser.SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(FLISPAssemblyParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(FLISPAssemblyParser.WS, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 4, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 41;
				Match(SYMB);
				State = 42;
				Match(T__0);
				}
				break;
			}
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 45;
				Match(WS);
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__3:
			case T__4:
			case T__5:
			case SYMB:
				{
				State = 48;
				directive();
				}
				break;
			case ISTRING:
				{
				State = 49;
				instr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 52;
				Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrgdirContext orgdir() {
			return GetRuleContext<OrgdirContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqudirContext equdir() {
			return GetRuleContext<EqudirContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FcbdirContext fcbdir() {
			return GetRuleContext<FcbdirContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FcsdirContext fcsdir() {
			return GetRuleContext<FcsdirContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RmbdirContext rmbdir() {
			return GetRuleContext<RmbdirContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_directive);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				orgdir();
				}
				break;
			case SYMB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				equdir();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				fcbdir();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 58;
				fcsdir();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 59;
				rmbdir();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgdirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(FLISPAssemblyParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public OrgdirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orgdir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrgdir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgdirContext orgdir() {
		OrgdirContext _localctx = new OrgdirContext(Context, State);
		EnterRule(_localctx, 8, RULE_orgdir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(T__1);
			State = 63;
			Match(WS);
			State = 64;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqudirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMB() { return GetToken(FLISPAssemblyParser.SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(FLISPAssemblyParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(FLISPAssemblyParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public EqudirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equdir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqudir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqudirContext equdir() {
		EqudirContext _localctx = new EqudirContext(Context, State);
		EnterRule(_localctx, 10, RULE_equdir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(SYMB);
			State = 67;
			Match(T__0);
			State = 68;
			Match(WS);
			State = 69;
			Match(T__2);
			State = 70;
			Match(WS);
			State = 71;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FcbdirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(FLISPAssemblyParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberlistContext numberlist() {
			return GetRuleContext<NumberlistContext>(0);
		}
		public FcbdirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fcbdir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFcbdir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FcbdirContext fcbdir() {
		FcbdirContext _localctx = new FcbdirContext(Context, State);
		EnterRule(_localctx, 12, RULE_fcbdir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(T__3);
			State = 74;
			Match(WS);
			State = 75;
			numberlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FcsdirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(FLISPAssemblyParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(FLISPAssemblyParser.STRINGLITERAL, 0); }
		public FcsdirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fcsdir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFcsdir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FcsdirContext fcsdir() {
		FcsdirContext _localctx = new FcsdirContext(Context, State);
		EnterRule(_localctx, 14, RULE_fcsdir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(T__4);
			State = 78;
			Match(WS);
			State = 79;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmbdirContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(FLISPAssemblyParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public RmbdirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmbdir; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmbdir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmbdirContext rmbdir() {
		RmbdirContext _localctx = new RmbdirContext(Context, State);
		EnterRule(_localctx, 16, RULE_rmbdir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(T__5);
			State = 82;
			Match(WS);
			State = 83;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISTRING() { return GetToken(FLISPAssemblyParser.ISTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(FLISPAssemblyParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmediateContext immediate() {
			return GetRuleContext<ImmediateContext>(0);
		}
		public InstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrContext instr() {
		InstrContext _localctx = new InstrContext(Context, State);
		EnterRule(_localctx, 18, RULE_instr);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				Match(ISTRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(ISTRING);
				State = 87;
				Match(WS);
				State = 88;
				number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				Match(ISTRING);
				State = 90;
				Match(WS);
				State = 91;
				immediate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberlistContext numberlist() {
			return GetRuleContext<NumberlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(FLISPAssemblyParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(FLISPAssemblyParser.WS, i);
		}
		public NumberlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberlistContext numberlist() {
		NumberlistContext _localctx = new NumberlistContext(Context, State);
		EnterRule(_localctx, 20, RULE_numberlist);
		int _la;
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				number();
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 96;
					Match(WS);
					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 102;
				Match(T__6);
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 103;
					Match(WS);
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 109;
				numberlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmediateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ImmediateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immediate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmediate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmediateContext immediate() {
		ImmediateContext _localctx = new ImmediateContext(Context, State);
		EnterRule(_localctx, 22, RULE_immediate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(T__7);
			State = 114;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECI() { return GetToken(FLISPAssemblyParser.HEXADECI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECI() { return GetToken(FLISPAssemblyParser.DECI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMB() { return GetToken(FLISPAssemblyParser.SYMB, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFLISPAssemblyVisitor<TResult> typedVisitor = visitor as IFLISPAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 24, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECI) | (1L << SYMB) | (1L << HEXADECI))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', 'y', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x6', '\x3', '\"', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '#', 
		'\x3', '\x3', '\a', '\x3', '\'', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'*', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '.', '\n', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x31', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x38', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '?', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '_', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x64', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'g', '\v', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 'k', '\n', '\f', 
		'\f', '\f', '\xE', '\f', 'n', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', 'r', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x2', '\x3', '\x3', '\x2', '\r', '\xF', '\x2', 'z', '\x2', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'-', '\x3', '\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', '\x2', '\x2', 
		'\n', '@', '\x3', '\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'K', '\x3', '\x2', '\x2', '\x2', '\x10', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'S', '\x3', '\x2', '\x2', '\x2', '\x14', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'q', '\x3', '\x2', '\x2', '\x2', '\x18', 
		's', '\x3', '\x2', '\x2', '\x2', '\x1A', 'v', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1D', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1E', '\a', '\x2', 
		'\x2', '\x3', '\x1E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1F', '(', 
		'\x5', '\x6', '\x4', '\x2', ' ', '\"', '\a', '\x12', '\x2', '\x2', '!', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', 
		'#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\x5', '\x6', '\x4', 
		'\x2', '&', '!', '\x3', '\x2', '\x2', '\x2', '\'', '*', '\x3', '\x2', 
		'\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\a', '\xE', '\x2', '\x2', ',', '.', '\a', 
		'\x3', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', '\x31', 
		'\a', '\x10', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x35', '\x5', '\b', '\x5', '\x2', '\x33', '\x35', '\x5', 
		'\x14', '\v', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x38', '\a', '\x10', '\x2', '\x2', '\x37', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x39', '?', '\x5', '\n', '\x6', '\x2', 
		':', '?', '\x5', '\f', '\a', '\x2', ';', '?', '\x5', '\xE', '\b', '\x2', 
		'<', '?', '\x5', '\x10', '\t', '\x2', '=', '?', '\x5', '\x12', '\n', '\x2', 
		'>', '\x39', '\x3', '\x2', '\x2', '\x2', '>', ':', '\x3', '\x2', '\x2', 
		'\x2', '>', ';', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', 
		'\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\t', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\a', '\x4', '\x2', '\x2', '\x41', '\x42', 
		'\a', '\x10', '\x2', '\x2', '\x42', '\x43', '\x5', '\x1A', '\xE', '\x2', 
		'\x43', '\v', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\xE', 
		'\x2', '\x2', '\x45', '\x46', '\a', '\x3', '\x2', '\x2', '\x46', 'G', 
		'\a', '\x10', '\x2', '\x2', 'G', 'H', '\a', '\x5', '\x2', '\x2', 'H', 
		'I', '\a', '\x10', '\x2', '\x2', 'I', 'J', '\x5', '\x1A', '\xE', '\x2', 
		'J', '\r', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\x6', '\x2', '\x2', 
		'L', 'M', '\a', '\x10', '\x2', '\x2', 'M', 'N', '\x5', '\x16', '\f', '\x2', 
		'N', '\xF', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\a', '\x2', '\x2', 
		'P', 'Q', '\a', '\x10', '\x2', '\x2', 'Q', 'R', '\a', '\v', '\x2', '\x2', 
		'R', '\x11', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\b', '\x2', 
		'\x2', 'T', 'U', '\a', '\x10', '\x2', '\x2', 'U', 'V', '\x5', '\x1A', 
		'\xE', '\x2', 'V', '\x13', '\x3', '\x2', '\x2', '\x2', 'W', '_', '\a', 
		'\f', '\x2', '\x2', 'X', 'Y', '\a', '\f', '\x2', '\x2', 'Y', 'Z', '\a', 
		'\x10', '\x2', '\x2', 'Z', '_', '\x5', '\x1A', '\xE', '\x2', '[', '\\', 
		'\a', '\f', '\x2', '\x2', '\\', ']', '\a', '\x10', '\x2', '\x2', ']', 
		'_', '\x5', '\x18', '\r', '\x2', '^', 'W', '\x3', '\x2', '\x2', '\x2', 
		'^', 'X', '\x3', '\x2', '\x2', '\x2', '^', '[', '\x3', '\x2', '\x2', '\x2', 
		'_', '\x15', '\x3', '\x2', '\x2', '\x2', '`', 'r', '\x5', '\x1A', '\xE', 
		'\x2', '\x61', '\x65', '\x5', '\x1A', '\xE', '\x2', '\x62', '\x64', '\a', 
		'\x10', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'l', 
		'\a', '\t', '\x2', '\x2', 'i', 'k', '\a', '\x10', '\x2', '\x2', 'j', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 'l', 
		'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x5', '\x16', '\f', '\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 
		'q', '`', '\x3', '\x2', '\x2', '\x2', 'q', '\x61', '\x3', '\x2', '\x2', 
		'\x2', 'r', '\x17', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\n', 
		'\x2', '\x2', 't', 'u', '\x5', '\x1A', '\xE', '\x2', 'u', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\t', '\x2', '\x2', '\x2', 'w', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\r', '#', '(', '-', '\x30', '\x34', '\x37', 
		'>', '^', '\x65', 'l', 'q',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
