//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/dcronqvist/repos/logix/examples/d1/d1-plugin/code/D1Assembly/D1Assembly.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace D1Plugin.D1Assembly {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class D1AssemblyLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, REGISTER=3, LABEL=4, IMHEXADECIMAL=5, HEXADECIMAL=6, IMDECIMAL=7, 
		DECIMAL=8, NEWLINE=9, WS=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "REGISTER", "LABEL", "IMHEXADECIMAL", "HEXADECIMAL", "IMDECIMAL", 
		"DECIMAL", "NEWLINE", "WS"
	};


	public D1AssemblyLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public D1AssemblyLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "REGISTER", "LABEL", "IMHEXADECIMAL", "HEXADECIMAL", 
		"IMDECIMAL", "DECIMAL", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "D1Assembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static D1AssemblyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', 'H', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'&', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '*', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '-', '\v', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x6', '\a', '\x34', '\n', 
		'\a', '\r', '\a', '\xE', '\a', '\x35', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x6', '\t', '<', '\n', '\t', '\r', '\t', '\xE', '\t', 
		'=', '\x3', '\n', '\x6', '\n', '\x41', '\n', '\n', '\r', '\n', '\xE', 
		'\n', '\x42', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x2', 
		'\x2', '\f', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', 
		'\x3', '\x2', '\t', '\x4', '\x2', '\x43', '\x44', '\x63', '\x64', '\x4', 
		'\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\x32', ';', '\x43', '\\', 
		'\x63', '|', '\x5', '\x2', '\x32', ';', '\x43', 'H', '\x63', 'h', '\x3', 
		'\x2', '\x32', ';', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x5', '\x2', 
		'\v', '\v', '\xF', '\xF', '\"', '\"', '\x2', 'O', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x3', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\x19', '\x3', '\x2', '\x2', '\x2', '\a', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\'', '\x3', '\x2', '\x2', '\x2', '\v', '.', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x37', '\x3', '\x2', '\x2', '\x2', '\x11', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '@', '\x3', '\x2', '\x2', '\x2', '\x15', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\a', '<', '\x2', '\x2', '\x18', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', '.', '\x2', '\x2', 
		'\x1A', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1B', '%', '\a', '\'', '\x2', 
		'\x2', '\x1C', '&', '\t', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', 'U', 
		'\x2', '\x2', '\x1E', '&', '\a', 'R', '\x2', '\x2', '\x1F', ' ', '\a', 
		'u', '\x2', '\x2', ' ', '&', '\a', 'r', '\x2', '\x2', '!', '\"', '\a', 
		'R', '\x2', '\x2', '\"', '&', '\a', '\x45', '\x2', '\x2', '#', '$', '\a', 
		'r', '\x2', '\x2', '$', '&', '\a', '\x65', '\x2', '\x2', '%', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '%', '\x1D', '\x3', '\x2', '\x2', '\x2', '%', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '%', '!', '\x3', '\x2', '\x2', '\x2', 
		'%', '#', '\x3', '\x2', '\x2', '\x2', '&', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\'', '+', '\t', '\x3', '\x2', '\x2', '(', '*', '\t', '\x4', '\x2', 
		'\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', 
		'\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', 
		'\x2', ',', '\n', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\a', '%', '\x2', '\x2', '/', '\x30', '\x5', '\r', 
		'\a', '\x2', '\x30', '\f', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', 
		'\a', '&', '\x2', '\x2', '\x32', '\x34', '\t', '\x5', '\x2', '\x2', '\x33', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\xE', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '%', '\x2', '\x2', '\x38', '\x39', '\x5', '\x11', '\t', 
		'\x2', '\x39', '\x10', '\x3', '\x2', '\x2', '\x2', ':', '<', '\t', '\x6', 
		'\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x12', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\t', 
		'\a', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\t', '\b', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\b', '\v', '\x2', '\x2', 'G', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x2', '%', '+', '\x35', '=', '\x42', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace D1Plugin.D1Assembly
